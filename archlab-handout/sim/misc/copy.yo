                            | # Execution begins at address 0
0x000:                      |         .pos 0
0x000: 30f40002000000000000 |         irmovq stack,%rsp        # Set up stack pointer
0x00a: 804800000000000000   |         call main                   # Execute main program
0x013: 00                   |         halt                        # Terminate program
                            | 
                            | # Sample linked list
0x018:                      | .align 8
                            | # Source block
0x018:                      | src:
0x018: 0a00000000000000     |         .quad 0x00a
0x020: b000000000000000     |         .quad 0x0b0
0x028: 000c000000000000     |         .quad 0xc00
                            | # Destination block
0x030:                      | dest:
0x030: 1101000000000000     |         .quad 0x111
0x038: 2202000000000000     |         .quad 0x222
0x040: 3303000000000000     |         .quad 0x333
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |         irmovq src,%rdi
0x052: 30f63000000000000000 |         irmovq dest,%rsi
0x05c: 30f20300000000000000 |         irmovq $3,%rdx
0x066: 807000000000000000   |         call copy_block
0x06f: 90                   |         ret
                            | 
0x070:                      | copy_block:
0x070: 6300                 |         xorq %rax,%rax
0x072: 30f10800000000000000 |         irmovq $8,%rcx
0x07c: 30f80100000000000000 |         irmovq $1,%r8
0x086:                      | loop:
0x086: 6222                 |         andq %rdx,%rdx                  # Set CC
0x088: 73b600000000000000   |         je end                          # 为零，跳转
0x091: 50370000000000000000 |         mrmovq  (%rdi),%rbx             # 解地址    val=*src
0x09b: 6017                 |         addq %rcx,%rdi                  # src++
0x09d: 40360000000000000000 |         rmmovq %rbx,(%rsi)              # *dest=val
0x0a7: 6016                 |         addq %rcx,%rsi                  # dest++
0x0a9: 6330                 |         xorq %rbx,%rax                  # result^=val
0x0ab: 6182                 |         subq %r8,%rdx                   # len--
0x0ad: 708600000000000000   |         jmp loop
0x0b6:                      | end:
0x0b6: 90                   |         ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      |         .pos 0x200
0x200:                      | stack: 
