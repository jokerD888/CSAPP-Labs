                            | # Execution begins at address 0
0x000:                      |         .pos 0
0x000: 30f40002000000000000 |         irmovq stack,%rsp        # Set up stack pointer
0x00a: 804800000000000000   |         call main                   # Execute main program
0x013: 00                   |         halt                        # Terminate program
                            | 
                            | # Sample linked list
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |         .quad 0x00a
0x020: 2800000000000000     |         .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |         .quad 0x0b0
0x030: 3800000000000000     |         .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |         .quad 0xc00
0x040: 0000000000000000     |         .quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |         irmovq ele1,%rdi
0x052: 6300                 |         xorq %rax,%rax                  # rax = 0
0x054: 30f20800000000000000 |         irmovq $8,%rdx                  # 设置偏移量
0x05e: 806800000000000000   |         call rsum_list
0x067: 90                   |         ret
                            | 
0x068:                      | rsum_list:
0x068: a03f                 |         pushq %rbx                      # 被调用者保存，此时，此函数为被调用函数
0x06a: 6277                 |         andq %rdi,%rdi                  # Set CC
0x06c: 739600000000000000   |         je end                          # 为零，跳转
0x075: 50370000000000000000 |         mrmovq  (%rdi),%rbx             # 解地址，ls->val，将val保存到被调用者保存寄存器rbx中
0x07f: 6027                 |         addq %rdx,%rdi                   # ls->next
0x081: 50770000000000000000 |         mrmovq (%rdi),%rdi              # ls=ls->next
0x08b: 806800000000000000   |         call rsum_list                  
0x094: 6030                 |         addq %rbx,%rax
0x096:                      | end:
0x096: b03f                 |         popq %rbx                      # 恢复
0x098: 90                   |         ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      |         .pos 0x200
0x200:                      | stack: 
